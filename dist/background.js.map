{"version":3,"file":"background.js","mappings":";;;;AAAO;AACP;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACf4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B,sCAAsC,GAAG,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,YAAY,eAAe;AAC3B;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA","sources":["webpack://hackathon/./src/types/index.ts","webpack://hackathon/./src/scripts/background.ts"],"sourcesContent":["export const DEFAULT_SETTINGS = {\n    autoSummarize: false,\n    promptForSummarize: \"Please summarize the following content, extract the key points and main ideas. Present the summary in a clear and concise way.\",\n    typeForSummarize: 'tl;dr',\n    formatForSummarize: 'markdown',\n    lengthForSummarize: 'medium',\n    promptForMultiSummarize: \"Please summarize these pieces of content together, find common themes and key points. Present a comprehensive summary.\",\n    typeForMultiSummarize: 'key-points',\n    formatForMultiSummarize: 'markdown',\n    lengthForMultiSummarize: 'long',\n    promptForCompare: \"Please compare and analyze the following content, focusing on their similarities, differences, and relationships. Organize your analysis in a clear structure.\",\n    typeForCompare: 'key-points',\n    formatForCompare: 'markdown',\n    lengthForCompare: 'long',\n    excludedDomains: []\n};\n","import { DEFAULT_SETTINGS } from '../types';\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('Extension installed, creating context menu...');\n    chrome.contextMenus.create({\n        id: 'addToPendingQueue',\n        title: 'Add to Pending Queue',\n        contexts: ['selection'],\n        enabled: true\n    }, () => {\n        if (chrome.runtime.lastError) {\n            console.error('Error creating context menu:', chrome.runtime.lastError);\n        }\n        else {\n            console.log('Context menu created successfully');\n        }\n    });\n});\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n    console.log('Context menu clicked:', info);\n    if (info.menuItemId === 'addToPendingQueue' && tab?.id) {\n        chrome.tabs.sendMessage(tab.id, {\n            type: 'addToPendingQueue',\n            text: info.selectionText\n        });\n    }\n});\n// 处理自动总结请求\nchrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\n    if (message.type === 'AUTO_SUMMARIZE_PAGE') {\n        console.log('Received page content and summary');\n        try {\n            // 获取设置\n            const { settings } = await chrome.storage.sync.get('settings');\n            const currentSettings = { ...DEFAULT_SETTINGS, ...settings };\n            // 检查是否启用自动总结\n            if (!currentSettings.autoSummarize) {\n                console.log('Auto summarize is disabled');\n                return;\n            }\n            // 检查是否已经保存过该页面\n            const isDuplicate = await isDuplicateRecord(message.pageContent.url);\n            if (isDuplicate) {\n                console.log('Page already summarized, skipping...');\n                return;\n            }\n            // 创建记录对象，类似 popup 的 handleSave 逻辑\n            const record = {\n                id: Date.now().toString(),\n                url: message.pageContent.url,\n                title: message.pageContent.title,\n                summary: message.summary,\n                timestamp: new Date().toISOString()\n            };\n            // 保存记录，复用 saveRecord 逻辑\n            await saveRecord(record);\n            console.log('Summary saved successfully:', record);\n            // 可选：通知内容脚本保存完成\n            if (sender.tab?.id) {\n                chrome.tabs.sendMessage(sender.tab.id, {\n                    type: 'SUMMARY_SAVED',\n                    record\n                });\n            }\n        }\n        catch (error) {\n            console.error('Auto summarization failed:', error);\n        }\n    }\n});\n// 复用 PopupManager 中的 saveRecord 逻辑\nasync function saveRecord(record) {\n    const { records = [] } = await chrome.storage.local.get('records');\n    records.push(record);\n    await chrome.storage.local.set({ records });\n}\n// 可选：添加重复检查，避免重复保存同一页面\nasync function isDuplicateRecord(url) {\n    const { records = [] } = await chrome.storage.local.get('records');\n    return records.some((record) => record.url === url);\n}\n"],"names":[],"sourceRoot":""}